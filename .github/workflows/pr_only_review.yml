name: PR Tester

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  generate_tests:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
    
      - name: Prepare and Send for Code Review
        id: send_code_review
        run: |
          RESPONSE=$(curl --location 'http://localhost:5052/ai/review' \
            --form 'RunName="CodeReview"' \
            --form 'jobName="DemoCodeReviewerGithub"' \
            --form 'PromptId="CodeReviewer__CodeReviewer_V1_Conventions"' \
            --form 'Llm="${{ vars.LLM }}"' \
            --form 'PullRequestId="${{ github.event.pull_request.number }}"' \
            --form 'RepoName="julioarruda/vulnado"' \
            --form 'AdditionalInstructions="generate the answer in the following language ${{ vars.LANGUAGE }}"' \
            --form 'Conventions="Header,Description,Summary,Recomendations,VulnExplanation"')
          echo "API Response: $RESPONSE"
          JOB_ID=$(echo $RESPONSE)
          echo "job_id=$JOB_ID" >> $GITHUB_ENV

      - name: Monitor Code Review Job Status
        id: monitor_code_review_status
        run: |
          JOB_ID=${{ env.job_id }}
          STATUS="Pending"
          while [[ "$STATUS" != "Completed" ]]; do
            RESPONSE=$(curl --location "http://localhost:5052/ai/jobs/$JOB_ID/status")
            STATUS=$(echo $RESPONSE | jq -r '.status')
            echo "Current status: $STATUS"
            sleep 10
          done
          echo "Final status: $STATUS"
          OUTPUT_URIS=$(echo $RESPONSE | jq -r '.results[].output[].uri')
          echo "job_response=$RESPONSE" >> $GITHUB_ENV
          echo "output_uris=$OUTPUT_URIS" >> $GITHUB_ENV